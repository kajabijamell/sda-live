<p>
  <strong>Name:</strong>
  <%= @admin_live_stream.name %>
</p>

<p>
  <strong>Playback policy:</strong>
  <%= @admin_live_stream.playback_policy %>
</p>

<p>
  <strong>Endpoint to Broadcast:</strong>
  <div><span class="badge badge-secondary">rtmp://global-live.mux.com:5222/app</span> (Standard RTMP entry point. Compatible with the majority of streaming applications and services.)</div>
  <div><span class="badge badge-secondary">rtmps://global-live.mux.com:443/app</span> (Secure RTMPS entry point. Compatible with less streaming applications, but offers a higher level of security.)</div>
</p>

<p>
  <strong>Stream Key:</strong>
  <%= @admin_live_stream.mux_stream_key %>
</p>

<h3>Other Targets</h3>
<table class="table">
  <thead>
  <tr>
    <th>Platform</th>
    <th>Endpoint</th>
    <th>Stream Key</th>
  </tr>
  </thead>

  <tbody>
  <% @admin_live_stream.admin_simulcast_targets.each do |simulcast_target| %>
    <tr>
      <td><%= simulcast_target.platform %></td>
      <td><%= simulcast_target.url %></td>
      <td><%= simulcast_target.stream_key %></td>
    </tr>
  <% end %>
  </tbody>
</table>

<%= link_to 'Back', admin_live_streams_path %>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<video id="video" width="50%" controls></video>
<% if @live_stream.present? %>
  <script>
      let video = document.getElementById('video');
      video.poster = "https://image.mux.com/<%= @live_stream.playback_id %>/thumbnail.jpg";
      let videoSrc = 'https://stream.mux.com/<%= @live_stream.playback_id %>.m3u8';
      if (Hls.isSupported()) {
          var hls = new Hls();
          hls.loadSource(videoSrc);
          hls.attachMedia(video);
          hls.on(Hls.Events.MANIFEST_PARSED, function() {
              video.play();
          });
      }
          // hls.js is not supported on platforms that do not have Media Source
          // Extensions (MSE) enabled.
          //
          // When the browser has built-in HLS support (check using `canPlayType`),
          // we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video
          // element through the `src` property. This is using the built-in support
          // of the plain video element, without using hls.js.
          //
          // Note: it would be more normal to wait on the 'canplay' event below however
          // on Safari (where you are most likely to find built-in HLS support) the
          // video.src URL must be on the user-driven white-list before a 'canplay'
          // event will be emitted; the last video event that can be reliably
      // listened-for when the URL is not on the white-list is 'loadedmetadata'.
      else if (video.canPlayType('application/vnd.apple.mpegurl')) {
          video.src = videoSrc;
          video.addEventListener('loadedmetadata', function() {
              video.play();
          });
      }
  </script>
<% else %>
  <h3 id="no-live-stream">No live streams currently.</h3>
<% end %>